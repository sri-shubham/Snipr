// Code generated by MockGen. DO NOT EDIT.
// Source: shorten.go

// Package shorten is a generated GoMock package.
package shorten

import (
	context "context"
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sri-shubham/snipr/storage/models"
)

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShortener) Shorten(ctx context.Context, url *url.URL, ttl time.Duration) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, url, ttl)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerMockRecorder) Shorten(ctx, url, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortener)(nil).Shorten), ctx, url, ttl)
}

// ShortenCustom mocks base method.
func (m *MockShortener) ShortenCustom(ctx context.Context, url *url.URL, customString string, ttl time.Duration) (*models.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenCustom", ctx, url, customString, ttl)
	ret0, _ := ret[0].(*models.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenCustom indicates an expected call of ShortenCustom.
func (mr *MockShortenerMockRecorder) ShortenCustom(ctx, url, customString, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenCustom", reflect.TypeOf((*MockShortener)(nil).ShortenCustom), ctx, url, customString, ttl)
}
